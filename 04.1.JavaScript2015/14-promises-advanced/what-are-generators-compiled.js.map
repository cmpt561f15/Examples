{"version":3,"sources":["what-are-generators.js"],"names":[],"mappings":";;;;;;;AAGA,IAAI,KAAK,2BAAG,SAAR,KAAK;QACD,GAAG,EACH,GAAG,EACH,KAAK;;;;;uBAFO,CAAC;;;AAAb,mBAAG;;uBACS,CAAC;;;AAAb,mBAAG;;uBACW,CAAC;;;AAAf,qBAAK;;AACT,uBAAO,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;;;;;;OAJ7B,KAAK;CAKR,CAAA,CAAC;AACF,IAAI,GAAG,GAAG,KAAK,EAAE,CAAC;;AAElB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;AACxB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;AACxB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;AACxB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;AACxB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;;;;AAIxB,SAAS,SAAS,CAAC,SAAS,EAAE;AAC1B,QAAI,GAAG,GAAG,SAAS,EAAE,CAAC;AACtB,QAAI,UAAU,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;AAC5B,QAAI,UAAU,CAAC,IAAI,EAAE;;AAEjB,kBAAU,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;KAC7B;CACJ;;;AAGD,OAAO,CAAC,SAAS,yBAAC;QACV,MAAM;;;;;uBAAS,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC;;;AAAnC,sBAAM;;AACV,uBAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;;;;;;;CACvB,EAAC,EAAE,CAAC;;;;;AAML,OAAO,CAAC,SAAS,yBAAC;QACV,MAAM,EACN,OAAO,EACP,OAAO;;;;;uBAFQ,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC;;;AAAnC,sBAAM;;uBACU,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC;;;AAArC,uBAAO;;uBACS,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC;;;AAArC,uBAAO;;AACX,uBAAO,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;;;;;;;CACzC,EAAC,EAAE,CAAC;;;AAIL,OAAO,CAAC,SAAS,yBAAC;QACV,IAAI;;;;iCACI,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC;;uBACb,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC;;;;;;AADpC,0BAAM;AACN,2BAAO;;;;AAFP,oBAAI;;AAIR,uBAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;;;;;;;CAC1C,EAAC,EAAE,CAAC;;AAEL,OAAO,CAAC,SAAS,yBAAC;qBACT,MAAM,EAAE,OAAO;;;;;iCAAW,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC;;uBAAQ,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC;;;;;;;;;;AAA3E,sBAAM;AAAE,uBAAO;;AACpB,uBAAO,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;;;;;;;CAChC,EAAC,EAAE,CAAC","file":"what-are-generators-compiled.js","sourcesContent":["//what are generators?\n//they're pausable functions, pausable iterable objects, to be more precise\n//they're defined with the *\nvar myGen = function*() {\n    var one = yield 1;\n    var two = yield 2;\n    var three = yield 3;\n    console.log(one, two, three);\n};\nvar gen = myGen(); //get the generator ready to run\n//when you run next() on a generator, it runs until a yield, then waits until next() is called again\nconsole.log(gen.next()); //{value:1, done: false}\nconsole.log(gen.next()); //{value:2, done: false}\nconsole.log(gen.next()); //{value:3, done: false}\nconsole.log(gen.next()); //{value:undefined, done: true}\nconsole.log(gen.next()); //errors because you can't call next() on a closed generator\n\n//so yippee, when do I ever have to yield numbers?  Seems silly\n//the magic happens when smarter code wraps the generator\nfunction smartCode(generator) {\n    var gen = generator();\n    var yieldedVal = gen.next();\n    if (yieldedVal.then) {\n        //it's a promise!!!\n        yieldedVal.then(gen.next);\n    }\n}\n\n//enter libraries like Co, Bluebird, Q...let's use Bluebird\nPromise.coroutine(function* () {\n    var tweets = yield $.get('tweets.json');\n    console.log(tweets);\n})();\n//Bluebird runs the generator, notices yield is a promise\n//so it waits on that promise, then passes it's value back to the generator when complete\n\n\n//here, it runs them in sequence, waiting for each to complete before proceeding\nPromise.coroutine(function* () {\n    var tweets = yield $.get('tweets.json');\n    var profile = yield $.get('profile.json');\n    var friends = yield $.get('friends.json');\n    console.log(tweets, profile, friends);\n})();\n\n\n//if you want to run them at the same time, yield an object or an array\nPromise.coroutine(function* () {\n    var data = yield {\n        tweets: $.get('tweets.json'),\n        profile: yield $.get('profile.json')\n    };\n    console.log(data.tweets, data.profile);\n})();\n\nPromise.coroutine(function* () {\n    var [tweets, profile] = yield [$.get('tweets.json'), yield $.get('profile.json')];\n    console.log(tweets, profile);\n})();\n"]}