{"version":3,"sources":["what-are-promises.js"],"names":[],"mappings":";;;;;;;;;AAOA,IAAI,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,cAAc,EAAC,CAAC,CAAC;;;;AAI5D,UAAU,CAAC,IAAI,CACX,UAAU,IAAI,EAAE;AACZ,WAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;CACrB,EAAE,UAAU,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE;AAC5B,WAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;CAC1B,CACJ,CAAC;;;;;;;;AAQF,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,UAAU,OAAO,EAAE;AAC1C,WAAO,CAAC,CAAC,GAAG,CAAC,iBAAiB,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;CAChD,CAAC,CAAC,IAAI,CAAC,UAAU,MAAM,EAAE;;CAEzB,EAAE,UAAU,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE;;CAEhC,CAAC,CAAC;;;;AAIH,IAAI,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;AACvC,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;;AAErC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,UAAU,OAAO,EAAE,MAAM,EAAE;;AAE1D,WAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,WAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;CAC1B,EAAE,YAAY;;CAEd,CAAC,CAAC","file":"what-are-promises-compiled.js","sourcesContent":["//WHAT ARE PROMISES?\n\n//promises represent future values...values that may or may not have been grabbed yet\n//\"promise syntax\" frees us from having to use callbacks by using then()\n//promises are used by jQuery as well as other libraries such as Bluebird, Q, When, Async\n//promises all have a .then(success, error) method that accepts 2 functions\n//let's start getting profile.json, returns a promise\nvar getProfile = $.ajax({type: 'GET', url: 'profile.json'});\n\n//of course, that doesn't do us any good, because once the profile is received, nothing happens\n//let's add a .then()\ngetProfile.then(\n    function (data) {\n        console.log(data);\n    }, function (xhr, state, error) {\n        console.log(arguments);\n    }\n);\n\n//so off-the-bat, it looks more complicated than using success & error\n//the cool thing about promises, is they can be chained.  \n//the value that .then() returns is passed to the next .then()\n//if .then() returns a promise object, it waits for that promise to fulfill\n//before firing the next .then()\n//if .then() #1 has an error, all the others are skipped and the last error function receives the error\n$.get('profile.json').then(function (profile) {\n    return $.get('friend.json?id=' + profile.id);\n}).then(function (friend) {\n    //do something with friend\n}, function (xhr, status, error) {\n    //do something with the errors from either action\n});\n\n// what if I want to do several things at once?\n// create the promises\nvar getProfile = $.get('profile.json');\nvar getFriend = $.get('friend.json');\n//pass them to the $.when() function\n$.when(getProfile, getFriend).then(function (profile, friend) {\n    //each response is an array of the 3 items passed to a jQuery success: [data, status, xhr]\n    console.log(profile[0]); //profile\n    console.log(friend[0]); //friend\n}, function () {\n    //handle error\n});\n\n\n"]}